[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rocketgraph-public-api"
version = "1.0.0"
description = "RocketGraph Public API for graph database operations"
authors = [
    {name = "RocketGraph Team", email = "engineering@rocketgraph.com"}
]
license = {text = "Proprietary"}
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "mcp>=1.0.0,<2.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.22.0",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 170
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "venv",
    ".venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "S101",  # Use of assert detected (pytest uses assert)
    "S104",  # Possible binding to all interfaces
    "S608",  # Possible SQL injection via string formatting
    "B008",  # Function call in argument default
    "B904",  # Exception chaining - project doesn't use from clause
    # False positives and style-only issues (two-tier approach)
    "S106",  # Hardcoded password (false positive for OAuth2 "bearer" token type)
    "S110",  # Try-except-pass (legitimate for connection cleanup)
    "N805",  # Invalid first argument name for method (style preference)
    "N818",  # Error suffix on exception name (style preference)
    "SIM102", # Collapsible if (style preference)
    "SIM105", # Suppressible exception (style preference)
    "SIM108", # If-else block instead of if-exp (style preference)
    "C401",  # Unnecessary generator set (minor optimization)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # Use of assert is fine in tests
    "S105",  # Hardcoded password in tests is fine
    "S106",  # Hardcoded password in tests is fine
    "S113",  # Requests without timeout is fine in tests
    "PLR2004",  # Magic values are fine in tests
    "T201",  # Print statements are fine in test scripts
    "F401",  # Unused imports are fine in tests
    "UP006", # Old type annotations fine in tests
    "UP035", # Deprecated imports fine in tests
    "W293",  # Whitespace in blank lines fine in tests
]
"**/test_*.py" = ["T201", "S105", "S106", "S113", "F401", "UP006", "UP035", "W293", "E722"]
"test_*.py" = ["T201", "S105", "S106", "S113", "F401", "UP006", "UP035", "W293", "E722"]
"scripts/**/*.py" = [
    "S603",  # Subprocess calls are expected in scripts
    "S607",  # Partial executable paths are expected in scripts
    "S311",  # Random generators fine in scripts
    "E722",  # Bare except fine in scripts
]
"debug_token.py" = ["T201", "F541"]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "xgt.*",
    "xgt_connector.*",
    "arrow_odbc.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=20",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "security: Security tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except Exception:",
    "if xgt is None:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests
