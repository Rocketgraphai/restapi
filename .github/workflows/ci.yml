name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "18"

jobs:
  # Code Quality & Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt

    - name: Lint with ruff
      run: |
        ruff check . --output-format=github
        ruff format --check .

    - name: Type check with mypy
      run: mypy app/ --ignore-missing-imports

    - name: Security check with bandit
      run: bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements/*.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt

    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=20 \
          --junitxml=junit.xml \
          -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit.xml
          htmlcov/

  # Integration Tests with Services
  integration-test:
    name: Integration Tests (Mock)
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt

    - name: Run mock integration tests
      run: |
        pytest tests/integration/test_api_endpoints.py \
          --junitxml=mock-integration-junit.xml \
          -v

    - name: Upload mock integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mock-integration-test-results
        path: mock-integration-junit.xml

  # Integration Tests with Real XGT
  xgt-integration-test:
    name: Integration Tests (XGT)
    runs-on: ubuntu-latest
    needs: [test]
    # Only run if XGT license key is available
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.XGT_INTEGRATION_ENABLED == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Pull XGT Docker image
      env:
        XGT_VERSION: ${{ vars.XGT_VERSION || 'latest' }}
      run: |
        echo "Pulling rocketgraph/xgt:${XGT_VERSION} image..."
        docker pull rocketgraph/xgt:${XGT_VERSION}
        echo "XGT_IMAGE_TAG=${XGT_VERSION}" >> $GITHUB_ENV

    - name: Find available port for XGT
      id: find-port
      run: |
        # Find an available port starting from 4367
        for port in {4367..4377}; do
          if ! netstat -tuln | grep -q ":$port "; then
            echo "Found available port: $port"
            echo "xgt_port=$port" >> $GITHUB_OUTPUT
            break
          fi
        done
        
        # Fallback to a random high port if none found
        if [ -z "$xgt_port" ]; then
          port=$(shuf -i 5000-5999 -n 1)
          echo "Using fallback port: $port"
          echo "xgt_port=$port" >> $GITHUB_OUTPUT
        fi

    - name: Start XGT server
      run: |
        echo "Starting XGT server (${XGT_IMAGE_TAG}) on port ${{ steps.find-port.outputs.xgt_port }}..."
        docker run -d \
          --name xgt-server \
          -p ${{ steps.find-port.outputs.xgt_port }}:4367 \
          -e XGT_LICENSE_KEY="${{ secrets.XGT_LICENSE_KEY }}" \
          --health-cmd="curl -f http://localhost:4367/health || exit 1" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=3 \
          rocketgraph/xgt:${XGT_IMAGE_TAG}
        
        echo "Waiting for XGT server to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:${{ steps.find-port.outputs.xgt_port }}/health 2>/dev/null; do 
          echo "Waiting for XGT server..."
          sleep 3
        done'
        
        echo "XGT server is ready! Version: ${XGT_IMAGE_TAG}"
        echo "Server info:"
        curl -s http://localhost:${{ steps.find-port.outputs.xgt_port }}/health | head -5

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt

    - name: Run XGT integration tests
      env:
        XGT_HOST: localhost
        XGT_PORT: ${{ steps.find-port.outputs.xgt_port }}
        XGT_USERNAME: admin
        XGT_PASSWORD: ""
        ENVIRONMENT: testing
      run: |
        pytest tests/integration/test_xgt_datasets.py \
          --junitxml=xgt-integration-junit.xml \
          -v -s

    - name: Show XGT logs on failure
      if: failure()
      run: |
        echo "=== XGT Server Logs ==="
        docker logs xgt-server || echo "Could not retrieve XGT logs"
        echo "=== Docker Container Status ==="
        docker ps -a | grep xgt-server || echo "No XGT container found"

    - name: Stop XGT server
      if: always()
      run: |
        echo "Stopping XGT server..."
        docker stop xgt-server || true
        docker rm xgt-server || true

    - name: Upload XGT integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: xgt-integration-test-results
        path: xgt-integration-junit.xml

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality]

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
        pip install locust

    - name: Run performance tests
      run: |
        pytest tests/performance/ \
          --junitxml=performance-junit.xml \
          -v

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: performance-junit.xml

  # Build and Test Docker Image
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, integration-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: rocketgraph-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-api -p 8000:8000 rocketgraph-api:test
        sleep 10
        curl -f http://localhost:8000/api/v1/public/health || exit 1
        docker stop test-api

  # Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [code-quality, test, integration-test, security, docker-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Check deployment requirements
      run: |
        echo "âœ… All tests passed"
        echo "âœ… Security scans completed"
        echo "âœ… Docker image builds successfully"
        echo "ðŸš€ Ready for deployment"

    - name: Create deployment artifact
      run: |
        mkdir -p deployment-artifacts
        echo "$(git rev-parse HEAD)" > deployment-artifacts/commit-sha.txt
        echo "$(date -u +%Y-%m-%dT%H:%M:%SZ)" > deployment-artifacts/build-time.txt

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts
        path: deployment-artifacts/

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [code-quality, test, integration-test, security, docker-build]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')

    steps:
    - name: Notify team of failure
      run: |
        echo "ðŸš¨ CI/CD Pipeline Failed!"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Please check the failed jobs above."